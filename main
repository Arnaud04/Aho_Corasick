#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define largeur_tab 500
#define hauteur_tab 500

void tri_bulle(char tri[][largeur_tab],int nb_carac_max,int nbmot);
int nbCaracMax(char tab[hauteur_tab][largeur_tab],int nbmot);
void affiche_tableau(char tab[hauteur_tab][largeur_tab] ,int nbmot);
void tri_ahoCorasick(int tabNboccurence[hauteur_tab],char myWord[hauteur_tab][largeur_tab],int nbWord,int nbCarWord,char texte[hauteur_tab][largeur_tab],int nbWordTexte,int nbCartext );
int nombreOccurenceCarac(char carac[hauteur_tab][largeur_tab],int caracX,char tab[hauteur_tab][largeur_tab],int nbMoTab);


//afaire marcher
int nombreOccurenceCarac(char carac[hauteur_tab][largeur_tab],int caracX,char tab[hauteur_tab][largeur_tab],int nbMotTab)
{
    int max=0;
    for(int j=0; j<caracX; j++)
    {
        for(int i=0; i<nbMotTab; i++)
        {
            if (tab[i][0] == carac[j][0])
            {
                max ++;
                printf("tab : %c et carac %c ",tab[i][0],carac[j][0]);
            }
        }
    }
    printf ("nb occ %d\n",max);



    return max;
}//renvoie le nombre d'occurence d'un caracteree voulu dans une colonne d'un tableau

void positionEgalite( char tab[hauteur_tab][largeur_tab],int colonne,int nbMotTab,char caracAcomparer)
{
    for(int i=0; i<nbMotTab; i++)
    {
        if(tab[i][colonne]==caracAcomparer)
        {
            return i;
        }
        else
            return -1;
    }
}

void tri_ahoCorasick(int tabNboccurence[hauteur_tab],char myWord[hauteur_tab][largeur_tab],int nbWord,int nbCarWord,char texte[hauteur_tab][largeur_tab],int nbWordTexte,int nbCartext )
{

    char tabEchec[hauteur_tab][26]  ={{0}}; //initialisation du tableau echec
    int x=0;
    int y=0;

        if (nombreOccurenceCarac(texte,nbWordTexte,myWord,nbWord)!=0) //si il y a au moins un caractere identique avec le tableau texte a la ieme colonne et myWord parmis toute les ligne de la ieme colonne
        {
            //intervalMinMax(&indicemin,&indicemax,myWord,0);
          /*  for (int i = 0; i < nbWord ; i ++)
            {
                for (int j = 0; j < nbCarWord && myWord[i][j]!='\0' ;j ++)
                {
                    do
                    {
                        if(positionEgalite()!= -1)
                        {

                        }

                    }
                    while(x != x+1);
                }
                printf("\n");
            }*/
        }
        else
        {
            printf("Aucune occurence dsl ...\n");
        }



/*
    for(int l=0; l<nbWord; l++)
    {
        printf("%d \n",tabNboccurence[l]);
    }
*/

}

void tri_bulle(char tri[][largeur_tab],int nb_carac_max,int nbmot)
{
    int parcours = nbmot;

    for(int k=0; k<parcours+5; k++)
    {
        for(int i=0;i<nbmot-1;i++)
        {
            if(strcmp(tri[i],tri[i+1])>0)
            {

               for (int j=0; j<nb_carac_max; j++)
               {
                   //strechange(tri[i][j],tri[i+1][j]);
                    char tmp = tri[i][j];
                    tri[i][j] = tri [i+1][j];
                    tri[i+1][j] = tmp;
               }

            }

        }
        parcours--;
    }
}

int nbCaracMax(char tab[hauteur_tab][largeur_tab],int nbmot)
{
    int max=0;
    int j=0;
    for(int i=0; i<nbmot; i++)
    {
        while (tab[i][j]!='\0')
        {
            j++;
        }

        if (max < j)
        {
           max=j;
        }

    }
    return j+1; //pour \0
}


void affiche_tableau(char tab[hauteur_tab][largeur_tab] ,int nbmot)
{
    for (int i=0; i<nbmot; i++)
    {
        printf("%s\n",tab[i]);
    }
    printf("\n");
}

int main()
{
    int i,j;
    char tab[hauteur_tab][largeur_tab];
    char mot[hauteur_tab][largeur_tab]= {{0}};
    int caractereActuel;
    int nb_carac = 0;
    int nbmot=0;
    int nb_carac_max =0;
    int tabNboccurence[hauteur_tab] = {0};


    FILE* fichier = NULL;

    fichier = fopen("texte.txt", "r");

    if (fichier != NULL)
    {

        do
        {
            caractereActuel = fgetc(fichier); // On lit le caractère


            //Si le caractere est une fin de mot on incremente le nombre de mot et on remet nb_carac a 0
            if(caractereActuel == ' ' || caractereActuel == '\n' || caractereActuel == ':')
            {
                //printf("\n\nChangement de mot, mot numero : %d\n",nbmot);

                nbmot++;
                nb_carac = 0;


            }
            else{ // Sinon on le stock dans le tableau de mots
                //printf("\nAjout du caractere %c au mot numero %d",caractereActuel,nbmot);

                  mot[nbmot][nb_carac] = caractereActuel;
                  nb_carac++;


                  if(nb_carac > nb_carac_max)
                  {
                      nb_carac_max = nb_carac;
                  }

            }

        } while (caractereActuel != EOF);
         // On continue tant que fgetc n'a pas retourné EOF (fin de fichier)
        nbmot ++;
        fclose(fichier);
    }

    int nbWord;
    char myword[hauteur_tab][largeur_tab];

    printf("Combien de mots voulez vous rechercher?\n");
    scanf("%d",&nbWord);

    if (nbWord <1)
    {
        printf("Erreur, recherchez au moins un mots\n");
        exit (1);
    }

    for(int i=0; i<nbWord; i++)
    {
        printf("Entrez le mot %d\n",i+1);
        scanf ("%s",&myword[i]);
    }

    printf("Tableau de mon fichier texte.txt :\n\n");
    affiche_tableau(mot,nbmot);
     printf("nb caractere max : %d \n",nbCaracMax(mot,nbmot));
    printf("nb mots : %d \n",nbmot);
    printf("Tableau de mes mots entrez : \n\n");
    affiche_tableau(myword,nbWord);
    printf("nb caractere max : %d \n",nbCaracMax(myword,nbWord));
    printf("nb mots : %d \n",nbWord);
    printf("===============================================\n");
    printf("Tableau du tri de mes mots\n\n");
    tri_bulle(myword,nbCaracMax(myword,nbWord),nbWord); //On tri le tableau par ordre aphabetique
    affiche_tableau(myword,nbWord);
    printf("===============================================\n");

    tri_ahoCorasick( tabNboccurence, myword, nbWord, nbCaracMax(myword,nbWord), mot, nbmot, nbCaracMax(mot,nbmot) );

    return 0;
}
